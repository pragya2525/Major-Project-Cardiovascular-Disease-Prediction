................................CELL 1................................
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix, ConfusionMatrixDisplay
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC


................................CELL 2................................
df = pd.read_csv("cardio_train.csv", sep=",")
df.head()


................................CELL 3................................
df.info()
df.isnull().sum()
df.describe()


................................CELL 4................................
print(df.columns.tolist())


................................CELL 5................................
df.columns = df.columns.str.strip().str.lower()

if "id" in df.columns:
    X = df.drop(["cardio", "id"], axis=1)
else:
    X = df.drop(["cardio"], axis=1)

y = df["cardio"]

scaler = StandardScaler()
X = scaler.fit_transform(X)

print("X shape:", X.shape)
print("y shape:", y.shape)


................................CELL 6................................
sns.countplot(x="cardio", data=df)
plt.title("Cardio Disease Distribution")
plt.show()

sns.countplot(x="gender", hue="cardio", data=df)
plt.title("Gender vs Cardio Disease")
plt.show()

sns.histplot(df["age"]/365, bins=20, kde=True)
plt.xlabel("Age (Years)")
plt.title("Age Distribution")
plt.show()

plt.figure(figsize=(10,6))
sns.boxplot(x="cardio", y="ap_hi", data=df)
plt.title("Systolic BP by Cardio Disease")
plt.show()

plt.figure(figsize=(10,6))
sns.boxplot(x="cardio", y="ap_lo", data=df)
plt.title("Diastolic BP by Cardio Disease")
plt.show()

plt.figure(figsize=(12,8))
sns.heatmap(df.corr(), annot=True, cmap="coolwarm")
plt.title("Correlation Matrix")
plt.show()


................................CELL 7................................
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


................................CELL 8................................
models = {
    "Logistic Regression": LogisticRegression(max_iter=1000),
    "Decision Tree": DecisionTreeClassifier(),
    "Random Forest": RandomForestClassifier(),
    "KNN": KNeighborsClassifier(),
    "SVM": SVC()
}

results = {}
for name, model in models.items():
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    acc = accuracy_score(y_test, y_pred)
    results[name] = acc
    print(f"\n{name} Accuracy: {acc:.2f}")
    print(classification_report(y_test, y_pred))
    
    cm = confusion_matrix(y_test, y_pred)
    disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=model.classes_)
    disp.plot(cmap="Blues")
    plt.title(f"Confusion Matrix - {name}")
    plt.show()


................................CELL 9................................
plt.figure(figsize=(8,5))
sns.barplot(x=list(results.keys()), y=list(results.values()), palette="viridis")
plt.title("Model Accuracy Comparison")
plt.ylabel("Accuracy")
plt.ylim(0,1)
plt.show()

results


................................CELL 10................................
best_model = max(results, key=results.get)
print(f"Best Model: {best_model} with Accuracy = {results[best_model]:.2f}")
